input -> a weighted graph & src node(no negative cycle)
Output -> Shortest distance from src node to all other node

-create a distance array "d" with all values to infinity // O(n)
-d[src]=0; O(1)

relaxation
    d[u]+ c(u,v)<d[v]
    --> d[v]=d[u]+ c(u,v)

negativeCycle = false;

for i=1 to n// O(n)
    for all eedge e(u, v, w); // O(m)
        //relax "e"
        if d[u]+w<d[v]
        d[v]= d[u]+w;
        if i == n;
            negativeCycle = true;

            
print wheather negativeCycle exist;
print the distance array "d"


---------------COMPLEXITY--------------
Time --> O(n*m)--> O( |V| * |E| ) --> O(n^3)
edge can be node^2

Space O(n);